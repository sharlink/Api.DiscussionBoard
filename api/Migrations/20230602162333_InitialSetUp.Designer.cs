// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230602162333_InitialSetUp")]
    partial class InitialSetUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCommantId")
                        .HasColumnType("int");

                    b.Property<string>("ReplyingTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentContent = "Impressive! Though it seems the drag feature could be improved. But overall it looks incredible. You've nailed the design and the responsiveness at various breakpoints works really well.",
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3829),
                            Score = 12,
                            UpdatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3832),
                            UserId = new Guid("c8de10e9-7268-4dd1-ae2b-2f897d7f0a58")
                        },
                        new
                        {
                            CommentId = 2,
                            CommentContent = "Woah, your project looks awesome! How long have you been coding for? I'm still new, but think I want to dive into Angular as well soon. Perhaps you can give me an insight on where I can learn Angular? Thanks!",
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3835),
                            Score = 5,
                            UpdatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3837),
                            UserId = new Guid("cb4e3ea5-9264-40a9-ae28-24a782b5ffd4")
                        },
                        new
                        {
                            CommentId = 3,
                            CommentContent = "If you're looking to kick start your career, search no further. React is all you need. Welcome to the Dark Side.",
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3839),
                            ParentCommantId = 2,
                            ReplyingTo = "lukeskywalker",
                            Score = 4,
                            UpdatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3840),
                            UserId = new Guid("1cd9e503-4a83-492a-afc6-35a9d182cdc1")
                        },
                        new
                        {
                            CommentId = 4,
                            CommentContent = "Chillax, my Padawans. Much to learn, you have. The fundamentals of HTML, CSS, and JS,  I'd recommend focusing on. It's very tempting to jump ahead but lay a solid foundation first. Everything moves so fast and it always seems like everyone knows the newest library/framework. But the fundamentals are what stays constant.",
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3843),
                            ParentCommantId = 2,
                            ReplyingTo = "vader",
                            Score = 2,
                            UpdatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3844),
                            UserId = new Guid("21e9638c-2dd9-4c43-b4a6-4c2f5fcb3f59")
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb4e3ea5-9264-40a9-ae28-24a782b5ffd4"),
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3446),
                            UserName = "lukesksywalker"
                        },
                        new
                        {
                            UserId = new Guid("c8de10e9-7268-4dd1-ae2b-2f897d7f0a58"),
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3694),
                            UserName = "leiaskywalker"
                        },
                        new
                        {
                            UserId = new Guid("1cd9e503-4a83-492a-afc6-35a9d182cdc1"),
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3697),
                            UserName = "vader"
                        },
                        new
                        {
                            UserId = new Guid("21e9638c-2dd9-4c43-b4a6-4c2f5fcb3f59"),
                            CreatedAt = new DateTime(2023, 6, 3, 2, 23, 33, 143, DateTimeKind.Local).AddTicks(3699),
                            UserName = "yoda"
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
